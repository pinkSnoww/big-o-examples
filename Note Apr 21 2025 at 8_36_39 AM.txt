بیایید **همه اجزای دفترچه تلفن** را به صورت حرفه‌ای و مرحله به مرحله بررسی کنیم:

---

### ۱. **تعریف انواع داده‌ها (TypeScript)**
```typescript
// src/features/phonebook/phonebookTypes.ts
export interface Member {
  id: string;
  name: string;
  position: string;
  email: string;
  phone: string;
  avatar?: string;
}

export interface Department {
  id: string;
  title: string;
  icon: string;
  members: Member[];
}

export type PhoneBookState = {
  status: 'idle' | 'loading' | 'error';
  searchTerm: string;
  deptSearchTerm: string;
  selectedDept: Department | null;
  selectedMember: Member | null;
};
```

---

### ۲. **سرویس API (ارتباط با بک‌اند)**
```typescript
// src/features/phonebook/phonebookAPI.ts
export const PhoneBookService = {
  fetchDepartments: async (): Promise<Department[]> => {
    const response = await fetch('/api/departments');
    if (!response.ok) throw new Error('Failed to fetch');
    return response.json();
  }
};
```

---

### ۳. **کامپوننت اصلی (PhoneBook)**
```tsx
// src/features/phonebook/PhoneBook.tsx
import { useState, useEffect } from 'react';
import { PhoneBookService } from './phonebookAPI';
import { Department, Member, PhoneBookState } from './phonebookTypes';
import { SearchHeader } from './components/SearchHeader';
import { DepartmentList } from './components/DepartmentList';
import { MemberList } from './components/MemberList';
import { MemberDetails } from './components/MemberDetails';
import { LoadingState, ErrorState, EmptyState } from './components/States';

export const PhoneBook = () => {
  // مدیریت حالت کلی
  const [state, setState] = useState<PhoneBookState>({
    status: 'loading',
    searchTerm: '',
    deptSearchTerm: '',
    selectedDept: null,
    selectedMember: null
  });

  // مدیریت داده‌ها
  const [departments, setDepartments] = useState<Department[]>([]);

  // دریافت داده‌ها از API
  useEffect(() => {
    const loadData = async () => {
      try {
        const data = await PhoneBookService.fetchDepartments();
        setDepartments(data);
        setState(prev => ({...prev, status: 'idle'}));
      } catch (error) {
        setState(prev => ({...prev, status: 'error'}));
      }
    };
    loadData();
  }, []);

  // فیلتر دپارتمان‌ها
  const filteredDepartments = departments.filter(dept =>
    dept.title.includes(state.deptSearchTerm)
  );

  // فیلتر اعضا
  const filteredMembers = state.selectedDept?.members.filter(member =>
    `${member.name} ${member.position}`.toLowerCase()
      .includes(state.searchTerm.toLowerCase())
  ) || [];

  // هندلرهای تعامل کاربر
  const handleDeptSelect = (dept: Department) => {
    setState(prev => ({
      ...prev,
      selectedDept: dept,
      selectedMember: null,
      searchTerm: ''
    }));
  };

  // رندر بر اساس وضعیت
  if (state.status === 'loading') return <LoadingState />;
  if (state.status === 'error') return <ErrorState />;
  if (departments.length === 0) return <EmptyState />;

  return (
    <div className="phonebook">
      <SearchHeader
        onDeptSearch={term => setState(prev => ({...prev, deptSearchTerm: term}))}
      />
      
      <div className="phonebook-content">
        <DepartmentList
          departments={filteredDepartments}
          selectedId={state.selectedDept?.id}
          onSelect={handleDeptSelect}
        />
        
        <MemberList
          members={filteredMembers}
          searchTerm={state.searchTerm}
          onSearch={term => setState(prev => ({...prev, searchTerm: term}))}
          onSelect={member => setState(prev => ({...prev, selectedMember: member}))}
        />
        
        <MemberDetails member={state.selectedMember} />
      </div>
    </div>
  );
};
```

---

### ۴. **کامپوننت جستجو (SearchHeader)**
```tsx
// src/features/phonebook/components/SearchHeader.tsx
import { MagnifyingGlassIcon } from '@heroicons/react/24/outline';

type Props = {
  onDeptSearch: (term: string) => void;
};

export const SearchHeader = ({ onDeptSearch }: Props) => {
  return (
    <header className="search-header">
      <div className="search-input-wrapper">
        <MagnifyingGlassIcon className="search-icon" />
        <input
          type="text"
          placeholder="جستجو در دپارتمان‌ها..."
          onChange={(e) => onDeptSearch(e.target.value)}
          className="search-input"
        />
      </div>
    </header>
  );
};
```

---

### ۵. **کامپوننت لیست دپارتمان‌ها (DepartmentList)**
```tsx
// src/features/phonebook/components/DepartmentList.tsx
import { Department } from '../phonebookTypes';

type Props = {
  departments: Department[];
  selectedId: string | null;
  onSelect: (dept: Department) => void;
};

export const DepartmentList = ({ 
  departments, 
  selectedId, 
  onSelect 
}: Props) => {
  return (
    <div className="department-list">
      <h3 className="list-title">دپارتمان‌ها</h3>
      <ul className="list">
        {departments.map(dept => (
          <li
            key={dept.id}
            className={`list-item ${selectedId === dept.id ? 'active' : ''}`}
            onClick={() => onSelect(dept)}
          >
            <span className="dept-icon">{dept.icon}</span>
            <span className="dept-title">{dept.title}</span>
            <span className="member-count">{dept.members.length}</span>
          </li>
        ))}
      </ul>
    </div>
  );
};
```

---

### ۶. **کامپوننت وضعیت‌ها (States)**
```tsx
// src/features/phonebook/components/States.tsx
export const LoadingState = () => (
  <div className="state-container">
    <div className="loading-spinner" />
    <p>در حال دریافت اطلاعات...</p>
  </div>
);

export const ErrorState = () => (
  <div className="state-container error">
    <p>خطا در دریافت اطلاعات!</p>
    <button className="retry-button">تلاش مجدد</button>
  </div>
);

export const EmptyState = () => (
  <div className="state-container">
    <p>هیچ دپارتمانی یافت نشد</p>
  </div>
);
```

---

### ۷. **استایل‌ها (CSS Modules)**
```css
/* src/features/phonebook/PhoneBook.module.css */
.phonebook {
  display: grid;
  grid-template-rows: auto 1fr;
  height: 100vh;
  max-width: 1200px;
  margin: 0 auto;
}

.phonebook-content {
  display: grid;
  grid-template-columns: 300px 1fr 400px;
  gap: 1rem;
  padding: 1rem;
}

.department-list {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.list-item {
  display: flex;
  align-items: center;
  padding: 1rem;
  cursor: pointer;
  transition: background 0.2s;
}

.list-item:hover {
  background: #f5f5f5;
}

.list-item.active {
  background: #e3f2fd;
}
```

---

### ✅ **نکات حرفه‌ای پیاده‌سازی:**
1. **مدیریت حالت متمرکز** با یک آبجکت state  
2. **تفکیک کامل منطق** از نمایش  
3. **خطایابی پیشرفته** با حالت‌های مختلف  
4. **استفاده از CSS Modules** برای استایل‌های ایزوله  
5. **پشتیبانی از قابلیت‌های دسترسی** (Accessibility)  
6. **آماده برای SSR** (Server-Side Rendering)  
7. **سازگاری با PWA** (Progressive Web App)  

این ساختار به راحتی قابل توسعه است و می‌تواند ویژگی‌های زیر را اضافه کند:
- **صفحه‌بندی** برای داده‌های حجیم  
- **ذخیره محلی** (Local Storage)  
- **جستجوی پیشرفته**  
- **مدیریت خطاهای پیچیده**  
- **آمار استفاده** (Analytics)